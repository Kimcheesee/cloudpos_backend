/**
 * @license MIT
 * @module @whoj/utils-vue@1.8.0
 * @copyright (c) 2023 Jonson B.
 */
'use strict';
const vueDemi = require('vue-demi');
const utilsCore = require('@whoj/utils-core');
const composables_unrefOfEl = require('./unrefOfEl.cjs');
const composables_tryOnScopeDispose = require('./tryOnScopeDispose.cjs');
const defaultWindow = /* @__PURE__ */ utilsCore.isClient() ? window : void 0;
const defaultDocument = /* @__PURE__ */ utilsCore.isClient() ? window.document : void 0;
function listenEvent(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (utilsCore.isString(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target) {
    return utilsCore.noop;
  }
  if (!Array.isArray(events)) {
    events = [events];
  }
  if (!Array.isArray(listeners)) {
    listeners = [listeners];
  }
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn) => fn());
    cleanups.length = 0;
  };
  const register = (el, event, listener) => {
    el.addEventListener(event, listener, options);
    return () => el.removeEventListener(event, listener, options);
  };
  const stopWatch = vueDemi.watch(
    () => composables_unrefOfEl.unrefElement(target),
    (el) => {
      cleanup();
      if (!el) {
        return;
      }
      cleanups.push(
        ...events.flatMap((event) => {
          return listeners.map((listener) => register(el, event, listener));
        })
      );
    },
    { immediate: true, flush: "post" }
  );
  const stop = () => {
    stopWatch();
    cleanup();
  };
  composables_tryOnScopeDispose.tryOnScopeDispose(stop);
  return stop;
}
exports.defaultDocument = defaultDocument;
exports.listenEvent = listenEvent;
//# sourceMappingURL=listenEvent.cjs.map

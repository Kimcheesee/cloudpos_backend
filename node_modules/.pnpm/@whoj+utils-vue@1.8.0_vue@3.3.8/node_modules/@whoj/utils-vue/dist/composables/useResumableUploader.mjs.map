{"version":3,"file":"useResumableUploader.mjs","sources":["../../src/composables/useResumableUploader.ts"],"sourcesContent":["import Resumable from 'resumablejs';\nimport { ref } from 'vue-demi';\nimport { isDef, isFunction } from '@whoj/utils-core';\nimport { tryOnMounted } from './tryOnMounted';\nimport { type ComputedRefableElement, unrefElement } from './unrefOfEl';\n\ntype ResumableFile = Resumable['files'][number];\ntype ConfigurationHash = ConstructorParameters<typeof Resumable>;\n\ninterface UploaderTargetFunction {\n  (uploader: Resumable): Resumable;\n}\n\ninterface UploaderTargetObject {\n  browse: ComputedRefableElement;\n  drop?: ComputedRefableElement;\n}\n\ninterface ResumableFileObject {\n  file: ResumableFile;\n  progress: number;\n  status: 'uploading' | 'success' | 'error' | 'canceled' | 'retrying';\n}\n\nexport interface UseResumableUploaderOptions extends ConfigurationHash {}\n\nexport function useResumableUploader(\n  options: UseResumableUploaderOptions,\n  target: UploaderTargetObject | UploaderTargetFunction\n) {\n  const files = ref<ResumableFileObject[]>([]);\n  const uploader = ref<Resumable>();\n\n  const findFile = (file: ResumableFile) => {\n    return files.value.find(item => item.file.uniqueIdentifier === file.uniqueIdentifier && item.status !== 'canceled');\n  };\n\n  // cancel an individual file\n  const cancelFile = (file: ResumableFile) => {\n    const _file = findFile(file);\n    if (_file) {\n      _file.status = 'canceled';\n      file.cancel();\n    }\n  };\n\n  const createResumable = () => {\n    const _uploader = new Resumable({\n      maxChunkRetries: 1,\n      testChunks: false,\n      ...options\n    });\n\n    if (!_uploader.support) {\n      throw new Error('Your browser doesn\\'t support chunked uploads. Get a better browser.');\n    }\n\n    if (isFunction(target)) {\n      uploader.value = target(_uploader);\n    } else {\n      const _browseEl = unrefElement(target.browse);\n      if (_browseEl) {\n        _uploader.assignBrowse(_browseEl, false);\n      }\n\n      if (isDef<ComputedRefableElement>(target.drop)) {\n        const _dropEl = unrefElement(target.drop);\n        if (_dropEl) {\n          _uploader.assignDrop(_dropEl);\n        }\n      }\n      uploader.value = _uploader;\n    }\n\n    uploader.value.on('fileAdded', (file: ResumableFile) => {\n      (file as any).hasUploaded = false;\n      // keep a list of files with some extra data that we can use as props\n      files.value.push({\n        file,\n        status: 'uploading',\n        progress: 0\n      });\n      uploader.value!.upload();\n    });\n\n    uploader.value.on('fileSuccess', (file: ResumableFile) => {\n      findFile(file)!.status = 'success';\n    });\n\n    uploader.value.on('fileError', (file) => {\n      findFile(file)!.status = 'error';\n    });\n\n    uploader.value.on('fileRetry', (file) => {\n      findFile(file)!.status = 'retrying';\n    });\n\n    uploader.value.on('fileProgress', (file: ResumableFile) => {\n      // console.log('fileProgress', progress)\n      const localFile = findFile(file);\n      // if we are doing multiple chunks we may get a lower progress number if one chunk response comes back early\n      const progress = file.progress(false);\n      if (progress > localFile!.progress) {\n        localFile!.progress = progress;\n      }\n    });\n  };\n\n  tryOnMounted(() => {\n    createResumable();\n  });\n\n  return {\n    files,\n    uploader,\n    findFile,\n    cancelFile\n  };\n}\n\n"],"names":[],"mappings":"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"}
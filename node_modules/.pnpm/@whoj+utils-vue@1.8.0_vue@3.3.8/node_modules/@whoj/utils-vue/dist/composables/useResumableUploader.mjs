/**
 * @license MIT
 * @module @whoj/utils-vue@1.8.0
 * @copyright (c) 2023 Jonson B.
 */
import Resumable from 'resumablejs';
import { ref } from 'vue-demi';
import { isFunction, isDef } from '@whoj/utils-core';
import { tryOnMounted } from './tryOnMounted.mjs';
import { unrefElement } from './unrefOfEl.mjs';
function useResumableUploader(options, target) {
  const files = ref([]);
  const uploader = ref();
  const findFile = (file) => {
    return files.value.find((item) => item.file.uniqueIdentifier === file.uniqueIdentifier && item.status !== "canceled");
  };
  const cancelFile = (file) => {
    const _file = findFile(file);
    if (_file) {
      _file.status = "canceled";
      file.cancel();
    }
  };
  const createResumable = () => {
    const _uploader = new Resumable({
      maxChunkRetries: 1,
      testChunks: false,
      ...options
    });
    if (!_uploader.support) {
      throw new Error("Your browser doesn't support chunked uploads. Get a better browser.");
    }
    if (isFunction(target)) {
      uploader.value = target(_uploader);
    } else {
      const _browseEl = unrefElement(target.browse);
      if (_browseEl) {
        _uploader.assignBrowse(_browseEl, false);
      }
      if (isDef(target.drop)) {
        const _dropEl = unrefElement(target.drop);
        if (_dropEl) {
          _uploader.assignDrop(_dropEl);
        }
      }
      uploader.value = _uploader;
    }
    uploader.value.on("fileAdded", (file) => {
      file.hasUploaded = false;
      files.value.push({
        file,
        status: "uploading",
        progress: 0
      });
      uploader.value.upload();
    });
    uploader.value.on("fileSuccess", (file) => {
      findFile(file).status = "success";
    });
    uploader.value.on("fileError", (file) => {
      findFile(file).status = "error";
    });
    uploader.value.on("fileRetry", (file) => {
      findFile(file).status = "retrying";
    });
    uploader.value.on("fileProgress", (file) => {
      const localFile = findFile(file);
      const progress = file.progress(false);
      if (progress > localFile.progress) {
        localFile.progress = progress;
      }
    });
  };
  tryOnMounted(() => {
    createResumable();
  });
  return {
    files,
    uploader,
    findFile,
    cancelFile
  };
}
export { useResumableUploader };
//# sourceMappingURL=useResumableUploader.mjs.map

/**
 * @license MIT
 * @module @whoj/utils-vue@1.8.0
 * @copyright (c) 2023 Jonson B.
 */

import { Arrayable, Func } from '@whoj/utils-types';
import { Ref, ComputedRef } from 'vue-demi';

/**
 * Maybe it's a ref, or a plain value
 *
 * ```ts
 * type Refable<T> = T | Ref<T>
 * ```
 */
type MaybeRef<T> = T | Ref<T>;
type Refable<T> = MaybeRef<T>;
/**
 * Maybe it's a computed ref, or a getter function
 *
 * ```ts
 * type ReadonlyRefable<T> = (() => T) | ComputedRef<T>
 * ```
 */
type ReadonlyRefable<T> = (() => T) | ComputedRef<T>;
/**
 * Maybe it's a ref, or a plain value, or a getter function
 *
 * ```ts
 * type ComputedRefable<T> = (() => T) | T | Ref<T> | ComputedRef<T>
 * ```
 */
type ComputedRefable<T> = ReadonlyRefable<T> | Refable<T>;

interface InferEventTarget<Events> {
    addEventListener(event: Events, fn?: any, options?: any): any;
    removeEventListener(event: Events, fn?: any, options?: any): any;
}
interface BasicEventListener<E = Event> {
    (evt: E): void;
}
/**
 * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.
 * @param event
 * @param listener
 * @param options
 */
declare function listenEvent<E extends keyof WindowEventMap>(event: Arrayable<E>, listener: Arrayable<(this: Window, ev: WindowEventMap[E]) => any>, options?: boolean | AddEventListenerOptions): Func;
declare function listenEvent<E extends keyof WindowEventMap>(target: Window, event: Arrayable<E>, listener: Arrayable<(this: Window, ev: WindowEventMap[E]) => any>, options?: boolean | AddEventListenerOptions): Func;
declare function listenEvent<E extends keyof DocumentEventMap>(target: Document, event: Arrayable<E>, listener: Arrayable<(this: Document, ev: DocumentEventMap[E]) => any>, options?: boolean | AddEventListenerOptions): Func;
declare function listenEvent<Names extends string, EventType = Event>(target: InferEventTarget<Names>, event: Arrayable<Names>, listener: Arrayable<BasicEventListener<EventType>>, options?: boolean | AddEventListenerOptions): Func;
declare function listenEvent<EventType = Event>(target: ComputedRefable<EventTarget | null | undefined>, event: Arrayable<string>, listener: Arrayable<BasicEventListener<EventType>>, options?: boolean | AddEventListenerOptions): Func;

export { type ComputedRefable, type MaybeRef, type ReadonlyRefable, type Refable, listenEvent };
//# sourceMappingURL=listenEvent.d.ts.map

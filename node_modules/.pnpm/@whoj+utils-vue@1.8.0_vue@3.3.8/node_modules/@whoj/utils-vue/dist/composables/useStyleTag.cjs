/**
 * @license MIT
 * @module @whoj/utils-vue@1.8.0
 * @copyright (c) 2023 Jonson B.
 */
'use strict';
const vueDemi = require('vue-demi');
const composables_tryOnMounted = require('./tryOnMounted.cjs');
const composables_tryOnScopeDispose = require('./tryOnScopeDispose.cjs');
const composables_listenEvent = require('./listenEvent.cjs');
let _id = 0;
function useStyleTag(css, options = {}) {
  const isLoaded = vueDemi.ref(false);
  const {
    document = composables_listenEvent.defaultDocument,
    immediate = true,
    manual = false,
    id = `whoj.utils-vue_style_tag_${++_id}`
  } = options;
  const cssRef = vueDemi.ref(css);
  let stop = () => {
  };
  const load = () => {
    if (!document) {
      return;
    }
    const el = document.getElementById(id) || document.createElement("style");
    if (!el.isConnected) {
      el.type = "text/css";
      el.id = id;
      if (options.media) {
        el.media = options.media;
      }
      document.head.appendChild(el);
    }
    if (isLoaded.value) {
      return;
    }
    stop = vueDemi.watch(
      cssRef,
      (value) => {
        el.textContent = value;
      },
      { immediate: true }
    );
    isLoaded.value = true;
  };
  const unload = () => {
    if (!document || !isLoaded.value) {
      return;
    }
    stop();
    document.head.removeChild(document.getElementById(id));
    isLoaded.value = false;
  };
  if (immediate && !manual) {
    composables_tryOnMounted.tryOnMounted(load);
  }
  if (!manual) {
    composables_tryOnScopeDispose.tryOnScopeDispose(unload);
  }
  return {
    id,
    css: cssRef,
    unload,
    load,
    isLoaded: vueDemi.readonly(isLoaded)
  };
}
exports.useStyleTag = useStyleTag;
//# sourceMappingURL=useStyleTag.cjs.map
